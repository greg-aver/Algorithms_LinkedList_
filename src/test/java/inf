package gregory;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.*;

class LinkedListTest {

    static {
        Node node1 = new Node(1);
        Node node2 = new Node(2);
        Node node3 = new Node(3);
        Node node4 = new Node(4);

        node1.next = node2;
        node2.next = node3;
        node3.next = node4;

        LinkedList linkedListGrowing = new LinkedList();
        linkedListGrowing.head = node1;
        linkedListGrowing.tail = node4;

        LinkedList linkedListEmpty = new LinkedList();

        Node node6 = new Node(6);
        Node node7 = new Node(7);
        Node node8 = new Node(8);
        Node node9 = new Node(6);
        Node node10 = new Node(6);
        Node node11 = new Node(8);

        node6.next = node7;
        node7.next = node8;
        node8.next = node9;
        node9.next = node10;
        node10.next = node11;

        LinkedList linkedListRepeat = new LinkedList();
        linkedListRepeat.head = node6;
        linkedListRepeat.tail = node11;

    }


    @BeforeEach
    public void setUp() {
        Node node1 = new Node(1);
        Node node2 = new Node(2);
        Node node3 = new Node(3);
        Node node4 = new Node(4);

        node1.next = node2;
        node2.next = node3;
        node3.next = node4;

        LinkedList linkedListGrowing = new LinkedList();
        linkedListGrowing.head = node1;
        linkedListGrowing.tail = node4;

        LinkedList linkedListEmpty = new LinkedList();

        Node node6 = new Node(6);
        Node node7 = new Node(7);
        Node node8 = new Node(8);
        Node node9 = new Node(6);
        Node node10 = new Node(6);
        Node node11 = new Node(8);

        node6.next = node7;
        node7.next = node8;
        node8.next = node9;
        node9.next = node10;
        node10.next = node11;

        LinkedList linkedListRepeat = new LinkedList();
        linkedListRepeat.head = node6;
        linkedListRepeat.tail = node11;
    }

    @Test
    void addInTail() {

    }

    @Test
    void findListEmpty() {

    }

    @Test
    void findAll() {
    }

    @Test
    void remove() {
    }

    @Test
    void removeAll() {
    }

    @Test
    void testAddInTail() {
    }

    @Test
    void testFind() {
    }

    @Test
    void testFindAll() {
    }

    @Test
    void testRemove() {
    }

    @Test
    void testRemoveAll() {
    }

    @Test
    void clear() {
    }

    @Test
    void count() {
    }

    @Test
    void insertAfter() {
    }
}